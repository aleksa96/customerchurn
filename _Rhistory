classProbs = TRUE,
verboseIter = FALSE
)
str(churn)
# Otklanjanje outlier-a iz tenure
boxplot(churn$tenure)
# Otklanjanje outlier-a iz tenure
boxplot(churn$tenure)
# Otklanjanje outlier-a iz tenure
boxplot(churn$MonthlyCharges)
churn$tenure[!churn$tenure %in% boxplot.stats(churn$tenure)$out]
boxplot(churn$tenure)$out
lg <- train(Churn ~ ., data = train, method="glm", trControl = control)
lg
# Kreiranje predikcija na osnovu test dataset-a
lg.pred <- predict(lg, newdata = test)
# Kreiranje matrice knofuzije
lg.cm <- confusionMatrix(lg.pred, test[["Churn"]])
lg.accuracy <- lg.cmm$overall[c(1,3,4)]
lg.accuracy <- lg.cm$overall[c(1,3,4)]
lg.cm
lg.cm
# Evaluacione metrike
source("Evaluacione metrike.R")
getEvaluationMetrics(lg.cm)
# Kreiranje matrice konfuzije
lg.cm.1 <- table(True = test$Churn, Predicted = lg.pred)
lg.cm.1
# Evaluacione metrike
source("Evaluacione metrike.R")
getEvaluationMetrics(lg.cm)
getEvaluationMetrics(lg.cm.1)
lmnet <- train(Churn ~ ., data = train, metric = "ROC", method = "glmnet", trControl = control,
preProcess = c("center","scale"))
lmnet <- train(Churn ~ ., data = train, metric = "ROC", method = "glmnet", trControl = control,
preProcess = c("center","scale"))
plot(lmnet)
lmnet$bestTune$alpha
lmnet$bestTune$alpha
# Kreiranje predikcija
lmnet.pred <- predict(lmnet, newdata = test)
# Kreiranje matrica knfuzije
lmnet.cm <- table(True = test$Churn, Predicted = lmnet.pred)
lmnet.cm
# Evaluacione metrike
getEvaluationMetrics(lmnet.cm)
# Cross-validation na train setu bira broj varijabli koje ce dodati na model na svakoj grani
rf <- train(Churn ~ ., data=train, metric = "ROC", method = "ranger", trControl = control)
plot(rf)
rf$metric
rf$metric$out
boxplot(rf)
# Kreiranje predikcija
rf.pred <- predict(rf, newdata = test)
# Kreiranje matrica knfuzije
rf.cm <- table(True = test$Churn, Predicted = rf.pred)
rf.cm
# Evaluacione metrike
getEvaluationMetrics(rf.cm)
# Cross-validacija kako bi se pronasla najbolja vrednost za k
knn <- train(Churn ~ ., data = train,
method = "knn", trControl = control,
preProcess = c("center","scale"), tuneLength = 50)
knn
# Kreiranje predikcija
knn.pred <- predict(knn, newdata = test)
# Kreiranje matrica knfuzije
knn.cm <- table(True = test$Churn, Predicted = knn.pred)
knn.cm
# Evaluacione metrike
getEvaluationMetrics(knn.cm)
svm <- train(Churn ~., data = train, method = "svmLinear",
trControl= control,
preProcess = c("center", "scale"),
tuneLength = 6,
tuneGrid = grid)
svm <- train(Churn ~., data = train, method = "svmLinear",
trControl= control,
preProcess = c("center", "scale"),
tuneLength = 6,
tuneGrid = grid)
svm
grid <- expand.grid(C = c(0.01, 0.05, 0.1, 0.25, 0.5, 1))
svm <- train(Churn ~., data = train, method = "svmLinear",
trControl= control,
preProcess = c("center", "scale"),
tuneLength = 6,
tuneGrid = grid)
svm
plot(svm)
# Kreiranje predikcija
svm.pred <- predict(svm, newdata = test)
# Kreiranje matrica knfuzije
svm.cm <- table(True = test$Churn, Predicted = svm.pred)
svm.cm
# Evaluacione metrike
getEvaluationMetrics(svm.cm)
models <- list("Logistic" = lm, "GLMnet" = lmnet, "Random Forest" = rf, "kNN" = knn, "SVM" = svm)
resamples <- resamples(models)
models <- list("Logistic" = lm, "GLMnet" = lmnet, "Random Forest" = rf, "kNN" = knn, "SVM" = svm)
resamples <- resamples(models)
models <- list("Logistic" = lg, "GLMnet" = lmnet, "Random Forest" = rf, "kNN" = knn, "SVM" = svm)
resamples <- resamples(models)
dotplot(resamples, metric="ROC", main = "Area Under Curve with 95% CI")
dotplot(resamples, metric="ROC", main = "AUC 95% CI")
m <- c("Logistic", "GLMnet", "Random Forest", "SVM", "KNN")
lgaccuracy <- glmcm$overall[c(1,3,4)]
lgaccuracy <- lg$overall[c(1,3,4)]
# 0.55 maksimizira AUC(area under the curve)
lmnetaccuracy <- lmnetcm$overall[c(1,3,4)]
# 0.55 maksimizira AUC(area under the curve)
lmnetaccuracy <- lmnet$overall[c(1,3,4)]
lgaccuracy <- lg.cm.1$overall[c(1,3,4)]
dotplot(resamples, metric="ROC", main = "AUC 95% CI")
summary(lg)
lg.cm <- confusionMatrix(lg.pred, test[["Churn"]])
lg.accuracy <- lg.cm$overall[c(1,3,4)]
lg.cm
lmnet.accuracy <- lmnet.cm.1$overall[c(1,3,4)]
lmnet.cm.1 <- confusionMatrix(lmnet.pred, test[["Churn"]])
lmnet.accuracy <- lmnet.cm.1$overall[c(1,3,4)]
lmnet.cm.1
rf.cm.1 <- confusionMatrix(rf.pred, test[["Churn"]])
rf.accuracy <- rf.cm.1$overall[c(1,3,4)]
rf.cm.1
View(rf.cm.1)
knn.cm.1 <- confusionMatrix(knn.pred, test[["Churn"]])
knn.accuracy <- knn.cm.1$overall[c(1,3,4)]
knn.cm.1
svm.cm.1 <- confusionMatrix(svm.pred, test[["Churn"]])
svm.accuracy <- svm.cm.1$overall[c(1,3,4)]
svm.cm.1
models <- list("Logistic" = lg, "GLMnet" = lmnet, "Random Forest" = rf, "kNN" = knn, "SVM" = svm)
resamples <- resamples(models)
dotplot(resamples, metric="ROC", main = "AUC 95% CI")
summary(lg)
models.list <- c("Logistic", "GLMnet", "Random Forest", "SVM", "KNN")
accuracy.summ <- bind_rows(Logistic = lg.accuracy, GLMnet = lmnet.accuracy, RandomForest = rf.accuracy, kNN = knn.accuracy, SVM = svm.accuracy)
library(tibble)
accuracy.summ.2 <- add_column(accuracy.summ, "Model" = models.list, .before = "Accuracy")
accuracy.summ.2
library(ggthemes)
install.packages("ggthemes")
library(ggthemes)
ggplot(accuracy.summ.2, aes(x = Model, y = Accuracy)) + geom_bar(stat = "identity") +
geom_errorbar(width = 0.2, aes(ymin = AccuracyLower, ymax = AccuracyUpper), color = "red") +
coord_cartesian(ylim = c(0.7, 0.85)) +
labs(y = "Accuracy %", x = "Model", title = "Model Prediction Accuracy with 95% CI") +
theme_minimal()
ggplot(accuracy.summ.2, aes(x = Model, y = Accuracy)) + geom_bar(stat = "red") +
geom_errorbar(width = 0.2, aes(ymin = AccuracyLower, ymax = AccuracyUpper), color = "red") +
coord_cartesian(ylim = c(0.7, 0.85)) +
labs(y = "Accuracy %", x = "Model", title = "Model Prediction Accuracy with 95% CI") +
theme_minimal()
ggplot(accuracy.summ.2, aes(x = Model, y = Accuracy)) + geom_bar(stat = "Churn") +
geom_errorbar(width = 0.2, aes(ymin = AccuracyLower, ymax = AccuracyUpper), color = "red") +
coord_cartesian(ylim = c(0.7, 0.85)) +
labs(y = "Accuracy %", x = "Model", title = "Model Prediction Accuracy with 95% CI") +
theme_minimal()
ggplot(accuracy.summ.2, aes(x = Model, y = Accuracy)) + geom_bar(stat = "Species") +
geom_errorbar(width = 0.2, aes(ymin = AccuracyLower, ymax = AccuracyUpper), color = "blue") +
coord_cartesian(ylim = c(0.7, 0.85)) +
labs(y = "Accuracy %", x = "Model", title = "Model Prediction Accuracy with 95% CI") +
theme_minimal()
ggplot(accuracy.summ.2, aes(x = Model, y = Accuracy)) + geom_bar(stat = "identity") +
geom_errorbar(width = 0.2, aes(ymin = AccuracyLower, ymax = AccuracyUpper), color = "blue") +
coord_cartesian(ylim = c(0.7, 0.85)) +
labs(y = "Accuracy %", x = "Model", title = "Model Prediction Accuracy with 95% CI") +
theme_minimal()
ggplot(accuracy.summ.2, aes(x = Model, y = Accuracy)) + geom_bar(stat = "identity") +
geom_errorbar(width = 0.2, aes(ymin = AccuracyLower, ymax = AccuracyUpper), color = "black") +
coord_cartesian(ylim = c(0.7, 0.85)) +
labs(y = "Accuracy %", x = "Model", title = "Model Prediction Accuracy with 95% CI") +
theme_minimal()
summary(lmnet)
plot(lmnet)
summary(lmnet)
summary(lg)
summary(lmnet)
summary(lg)
levels(churn$Contract)
summary(lg)
levels(churn$Contract)
levels(churn$PaymentMethod)
# Ucitavanje dataset-a
churn <- read.csv(file = "telecom customer churn.csv")
# Pregled dataset-a kao i tipova varijabli
summary(churn)
str(churn)
# Varijabla TotalCharges sadrzi 11 NA vrednosti koje je potrebno otkloniti
churn[is.na(churn$TotalCharges),1:6]
churn <- churn[complete.cases(churn),]
dim(churn)
unique(churn$SeniorCitizen)
churn$SeniorCitizen <- as.factor(ifelse(test = churn$SeniorCitizen == 1, yes = "Yes", no = "No"))
str(churn)
table(churn$SeniorCitizen)
# Cuvanje trenutnog dataset-a, kao prve, inicijalne verzije skupa podataka
saveRDS(object = churn, file = "telecom customer churn, v1.1.RData")
churn$customerID <- NULL
churn <- churn[,-c(19)]
rm(churn.data)
library(ggplot2)
## ggplot theme
theme <- theme(
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
legend.position="none"
)
summary(churn)
str(churn)
saveRDS(object = churn, "telecom customer churn, selected features, v1.1.RData")
data <- read.csv("telecom customer churn.csv")
ggplot(data = churn, aes(MonthlyCharges, color = Churn))+
geom_freqpoly(binwidth = 5, size = 1)
ggplot(data = data, aes(TotalCharges, color = Churn))+
geom_freqpoly(binwidth = 200, size = 1)
options(repr.plot.width = 4, repr.plot.height = 3)
library(tidyverse)
# Procentualni prikaz korisnika koji su napustili kompaniju (varijabla churn)
data %>%
group_by(Churn) %>%
summarize(n = n()) %>%
mutate(
percentage = round(n / sum(n), 3),
n = NULL) %>%
ggplot(aes(x = Churn, y = percentage)) + geom_col(aes(fill = Churn)) +
theme +
geom_text(
aes(x = Churn, y = percentage, label = paste(percentage*100, "%", sep = ""))
)
# Smanjivanje velicine grafika
options(repr.plot.width = 4, repr.plot.height = 4)
ggplot(data = data, aes(tenure, color = Churn))+
geom_freqpoly(binwidth = 200, size = 1)
ggplot(data = data, aes(tenure, color = Churn))+geom_point()
ggplot(data = data, aes(tenure, churn color = Churn))+geom_point()
ggplot(data = data, aes(tenure, churn, color = Churn))+geom_point()
ggplot(data = data, aes(tenure, color = Churn))+geom_boxplot()
ggplot(data = data, aes(tenure, color = Churn))
ggplot(data = data, aes(tenure, color = Churn))+geom_line()
ggplot(data = data, aes(tenure, color = Churn))
ggplot(data = data, aes(tenure, color = Churn)) + geom_freqpoly(binwidth = 200, size = 1)
?shapiro.test
shapiro.test(sample(churn$tenure,5000))
?t.test
# MonthlyCharges u odnosu na churn
t.test(churn$tenure, churn$Churn, var.equal = T)
# MonthlyCharges u odnosu na churn
churn$tenure <- as.numeric(churn$tenure)
t.test(churn$tenure, churn$Churn, var.equal = T)
t.test(churn$Churn, churn$tenure, var.equal = T)
t.test(churn$Churn~ churn$tenure, var.equal = T)
levels(churn$Churn)
summary(churn)
# MonthlyCharges u odnosu na churn
attach(churn)
t.test(tenure~ Churn, var.equal = T)
# MonthlyCharges u odnosu na churn
t.test(MonthlyCharges ~ Churn, var.equal = T)
wilcox.test(MonthlyCharges~chrun)
wilcox.test(MonthlyCharges~chrurn)
wilcox.test(MonthlyCharges~churn)
wilcox.test(MonthlyCharges~Churn)
# MonthlyCharges u odnosu na churn
t.test(MonthlyCharges ~ Churn, var.equal = T)
levels(churn$Churn)
t.test(tenure ~ Churn, var.equal = T)
ggplot(data = churn, aes(MonthlyCharges, color = Churn))+
geom_freqpoly(binwidth = 5, size = 1)
# Tenure u odnosu na churn
boxplot(tenure)
ggplot(data = data, aes(TotalCharges, color = Churn))+
geom_freqpoly(binwidth = 200, size = 1)
ggplot(data = data, aes(tenure, color = Churn))+
geom_freqpoly(binwidth = 200, size = 1)
View(churn)
# Procentualni prikaz korisnika koji su napustili kompaniju (varijabla churn)
corrplot::corrplot.mixed(as.matrix(churn[,c(5,18)]))
cor <- as.matrix(churn[,c(5,18)])
View(cor)
# Procentualni prikaz korisnika koji su napustili kompaniju (varijabla churn)
corrplot::corrplot.mixed(cor)
cor <- as.matrix(churn[,c(5,18)], diag = F)
# Procentualni prikaz korisnika koji su napustili kompaniju (varijabla churn)
corrplot::corrplot.mixed(cor)
cor <- as.data.frame(churn[,c(5,18)], diag = F)
# Procentualni prikaz korisnika koji su napustili kompaniju (varijabla churn)
corrplot::corrplot.mixed(cor)
View(cor)
cor <- as.matrix(churn[,c(5,18)])
?cor
# Procentualni prikaz korisnika koji su napustili kompaniju (varijabla churn)
corrplot::corrplot.mixed(cor(cor))
cor <- as.matrix(data[,c(5,18,19)])
# Procentualni prikaz korisnika koji su napustili kompaniju (varijabla churn)
corrplot::corrplot.mixed(cor(cor))
data$tenure <- as.numeric(data$tenure)
cor <- as.matrix(data[,c(5,18,19)])
# Procentualni prikaz korisnika koji su napustili kompaniju (varijabla churn)
corrplot::corrplot.mixed(cor(cor))
data %>%
group_by(Churn) %>%
summarize(n = n()) %>%
mutate(
percentage = round(n / sum(n), 3),
n = NULL) %>%
ggplot(aes(x = Churn, y = percentage)) + geom_col(aes(fill = Churn)) +
theme +
geom_text(
aes(x = Churn, y = percentage, label = paste(percentage*100, "%", sep = ""))
)
# Smanjivanje velicine grafika
options(repr.plot.width = 4, repr.plot.height = 4)
# Prikaz varijable churn u odnosu na kategoricke varijable, graficki
## Kategoricke (faktorske) varijable za prikaz
function_columns <- churn %>%
select(
"gender", "SeniorCitizen", "Partner", "Dependents", "PhoneService", "MultipleLines",
"InternetService", "OnlineSecurity", "OnlineBackup", "DeviceProtection", "TechSupport",
"StreamingTV", "StreamingMovies", "Contract", "PaperlessBilling", "PaymentMethod","Churn"
)
for (i in 1:ncol(function_columns)) {
# Get column names so dplyr group by works
cname <- colnames(function_columns[c(i,17)])
# Subset data frame by variable name selected
a <- subset(
function_columns, !is.na(function_columns[,i]) & function_columns[,i] != "",
select = cname
) %>%
# Create percentage statistics per variable
group_by_at(vars(cname)) %>%
summarize(
n = n()
) %>%
mutate(
Percentage = round(n / sum(n), 2)
)
# Save plot in a variable so plots can be displayed sequentialy
p <- ggplot(
data = a, aes_string(
x = colnames(a[1]), y = colnames(a[4]), fill = colnames(a[1])
)
) +
# Split each graph per Churn to see influence of variable
facet_wrap("Churn") +
geom_bar(stat = "identity") +
# Make graph a bit cleaner
theme(
axis.text.y = element_blank(), axis.ticks.y = element_blank(),
axis.text.x = element_text(angle = 70, hjust = 1),
legend.position="none"
) +
geom_text(
aes(y = Percentage, label = paste0(Percentage * 100,"%"))
) +
labs(
x = colnames(a[1]), y = "Churn", title = paste("Churn and", colnames(a[1]))
)
# Display graphs
print(p)
# Cleanup
rm(cname)
rm(i)
}
chisq.test(churn~Dependents)
chisq.test(churn, Dependents)
# install.packages("plot_grid")
# install.packages("Rtools")
#
# library(plot_grid)
options(repr.plot.width = 7, repr.plot.height = 3)
data %>%
filter(Churn == "Yes") %>%
group_by(tenure) %>%
summarize(
n = n()
) %>%
mutate(
Percentage = round(n / sum(n), 3)
) %>%
# Create plot
ggplot(
aes(x = tenure, y = Percentage, color = tenure)
) +
stat_smooth(method = "lm", col = "red") +
geom_point(alpha = 2/3) +
# Clean graph visual a bit
theme +
labs(
x = "Tenure", y = "Churn (%)"
)
ggplot(data = churn, aes(y = tenure, x = Churn, color = Churn)) +
theme +
geom_boxplot()
data %>%
filter(Churn == "Yes") %>%
group_by(MonthlyCharges) %>%
summarize(
n = n()
) %>%
mutate(
Percentage = round(n / sum(n), 3)
) %>%
# Create plot
ggplot(
aes(x = MonthlyCharges, y = Percentage, color = MonthlyCharges)
) +
stat_smooth(method = "lm", col = "red") +
geom_point(alpha = 2/3) +
# Clean graph visual a bit
theme +
labs(
x = "MonthlyCharges", y = "Churn (%)"
)
ggplot(data = churn, aes(y = MonthlyCharges, x = Churn, color = Churn)) +
theme +
geom_boxplot()
data %>%
filter(Churn == "Yes") %>%
group_by(TotalCharges) %>%
summarize(
n = n()
) %>%
mutate(
Percentage = round(n / sum(n), 3)
) %>%
# Create plot
ggplot(
aes(x = TotalCharges, y = Percentage, color = TotalCharges)
) +
stat_smooth(method = "lm", col = "red") +
geom_point(alpha = 2/3) +
# Clean graph visual a bit
theme +
labs(
x = "TotalCharges", y = "Churn (%)"
)
ggplot(data = data, aes(y = TotalCharges, x = Churn, color = Churn)) +
theme +
geom_boxplot()
data %>%
filter(Churn == "Yes") %>%
group_by(TotalCharges) %>%
summarize(
n = n()
) %>%
mutate(
Percentage = round(n / sum(n), 3)
) %>%
# Create plot
ggplot(
aes(x = TotalCharges, y = Percentage, color = TotalCharges)
) +
stat_smooth(method = "lm", col = "red") +
geom_point(alpha = 2/3) +
# Clean graph visual a bit
theme +
labs(
x = "TotalCharges", y = "Churn (%)"
)
data %>%
filter(Churn == "Yes") %>%
group_by(MonthlyCharges) %>%
summarize(
n = n()
) %>%
mutate(
Percentage = round(n / sum(n), 3)
) %>%
# Create plot
ggplot(
aes(x = MonthlyCharges, y = Percentage, color = MonthlyCharges)
) +
stat_smooth(method = "lm", col = "red") +
geom_point(alpha = 2/3) +
# Clean graph visual a bit
theme +
labs(
x = "MonthlyCharges", y = "Churn (%)"
)
# Varijable OnlineSecurity, OnlineBackup, DeviceProtection, TechSupport, StreamingTV and StreamingMovies
# zahtevaju internet konekciju i varijabla MultipleLines zahteva telefonsku uslugu tako da
# "No internet service" i "No phone service" zamenjujemo sa "No"
factorrenames <- names(churn[9:14])
churn <- churn %>%
mutate_at(.vars=factorrenames,
.funs=~recode_factor(., `No internet service`="No")) %>%
mutate_at(.vars="MultipleLines",
.funs=~recode_factor(., `No phone service`="No"))
str(churn)
# Podela dataset-a na train i test
library(caret)
set.seed(1)
i <- createDataPartition(churn$Churn, p = 0.7, list = FALSE)
train <- churn[i, ]
test <- churn[-i, ]
dim(train)
dim(test)
# Kreiranje trainControl tako da ce svi modeli uzimati isti cross-validation(10 fold)
control <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = TRUE,
verboseIter = FALSE
)
# Kreiranje modela na osnovu train dataset-a
lg <- train(Churn ~ ., data = train, method="glm", trControl = control)
lg
# Kreiranje predikcija na osnovu test dataset-a
lg.pred <- predict(lg, newdata = test)
head(lg.pred)
